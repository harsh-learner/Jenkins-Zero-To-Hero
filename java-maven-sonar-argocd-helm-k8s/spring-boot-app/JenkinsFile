pipeline {
    agent {
        docker {
            image 'learnerharsh/my-jenkins-agent-image1:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        DOCKER_HUB_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_HUB_USERNAME = 'learnerharsh'
        DOCKER_IMAGE = "${DOCKER_HUB_USERNAME}/ultimate-cicd:latest"  // Specify the desired image tag or version
        SONAR_URL = "http://13.233.4.226:9000/"
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "harsh-learner"
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Checkout stage passed"'
                // Uncomment and use the following lines to checkout from Git
                // git branch: 'main', url: 'https://github.com/harsh-learner/Jenkins-Zero-To-Hero.git'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // Build the project and create a JAR file
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_URL}"
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "harsh.xyz@gmail.com"
                        git config user.name "Harsh-Learner"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        
                        # Replace the image tag directly in the deployment.yml
                        sed -i "s|image: learnerharsh/ultimate-cicd:${PLACEHOLDER}|image: ${DOCKER_IMAGE}|" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                        # Check if the image tag is updated in the deployment.yml
                        if grep -q "${DOCKER_IMAGE}" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml; then
                            echo "Image tag updated successfully."
                        else
                            echo "Failed to update image tag in the deployment manifest."
                            exit 1  # Exit the pipeline with an error status
                        fi

                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${DOCKER_IMAGE}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}

